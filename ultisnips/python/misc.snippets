snippet sac "sqlalchemy connection" !b
import sqlalchemy as sa
from sqlalchemy.orm import sessionmaker


def get_session():
    URI = 'mysql://root@localhost/db'
    sess = sessionmaker(
        bind=sa.create_engine(URI))()
    return sess

endsnippet

snippet cod "encoding for python scripts" b
# -*- coding: utf-8 -*-
$0
endsnippet

snippet conn "sqlalchemy connection" b
import sqlalchemy as sa
conn = sa.create_engine('mysql://user:password@localhost/db').connect()
endsnippet

snippet microdjango "django as micro framework" b
# -*- coding: utf-8 -*-
"""
minimal django app. to run it:
python app.py runserver
"""

import sys

from django.conf import settings
from django.conf.urls import patterns
from django.http import HttpResponse
from django.core.management import execute_from_command_line

settings.configure(
    DEBUG=True,
    SECRET_KEY='placerandomsecretkeyhere',
    ROOT_URLCONF=sys.modules[__name__],
)


def index(request):
    return HttpResponse('Powered by Django')

urlpatterns = patterns('', (r'^$', index),)

if __name__ == "__main__":
    execute_from_command_line(sys.argv)
endsnippet


snippet multithreading "multi threading" b
import threading


def wait_to_run(func, event, sec, *arg, **kw):
    event.wait(sec)
    func(*arg)


def multi_threading(target, concurrency, *args):
    events = [threading.Event() for i in xrange(concurrency)]
    threads = [threading.Thread(target=wait_to_run,
                                args=(target, evt, 2) + args)
               for evt in events]
    for t in threads:
        t.start()
    for e in events:
        e.set()
    for t in threads:
        t.join()
endsnippet


snippet forkthreading "fork and multithreading" b
import os


def wait_to_run(func, event, sec, *arg, **kw):
    event.wait(sec)
    func(*arg)


def multi_threading(target, concurrency, *args):
    events = [threading.Event() for i in xrange(concurrency)]
    threads = [threading.Thread(target=wait_to_run,
                                args=(target, evt, 2) + args)
               for evt in events]
    for t in threads:
        t.start()
    for e in events:
        e.set()
    for t in threads:
        t.join()


def fork_and_multi_threading(target, concurrency, *args):
    pid = os.fork()
    if pid == 0:
        multi_threading(target, concurrency, *args)
        os._exit(0)
    return pid
endsnippet


snippet rand "random string" b
import random
import string


def rand_string(n):
    options = string.ascii_uppercase + string.digits
    return ''.join(random.choice(options) for _ in range(n))
endsnippet


snippet parametrize "pytest.mark.parametrize" b
import pytest


@pytest.mark.parametrize(
    "input,expected",
    [
        ("3+5", 8),
        ("6*9", 42),
    ],
    ids=["addition", "multiplication"],
)
def test_eval(input, expected):
    assert eval(input) == expected
endsnippet


snippet pwd "current working directory" b
from pathlib import Path

PWD = Path(__file__).absolute().parent
endsnippet

snippet tor "tornado server stub"
# -*- coding: utf-8 -*-
import tornado.ioloop
import tornado.web


class MainHandler(tornado.web.RequestHandler):
    def get(self):
        self.write("Hello, world")


def make_app():
    return tornado.web.Application([
        (r"/", MainHandler),
    ])

if __name__ == "__main__":
    app = make_app()
    app.listen(8888)
    tornado.ioloop.IOLoop.current().start()
endsnippet


snippet djangocmd "django command script"
#!/usr/bin/env python
# -*- coding: utf-8 -*-

from django.core.management.base import BaseCommand


class Command(BaseCommand):

    def add_arguments(self, parser):
        parser.add_argument(
            '-n', '--name', default='foo', help='name')

    def handle(self, *args, **options):
        print('command')
endsnippet


snippet nocover "no cover for coverage.py"
# pragma: no cover
endsnippet
