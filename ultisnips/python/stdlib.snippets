snippet dd "breakpoint" b
breakpoint()  # !!!!!!!!!!
endsnippet


snippet ifm "if main" b
def main():
    pass


if __name__ == '__main__':
    main()
endsnippet

snippet sb "Shebang header for python scripts" b
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
$0
endsnippet

snippet lgb "basic logging" b
import logging

logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s - %(levelname)s - %(message)s",
)
endsnippet

snippet lgs "logging to stream" b
handler = logging.StreamHandler()
handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
logger = logging.getLogger()
logger.setLevel(logging.DEBUG)
logger.addHandler(handler)
endsnippet

snippet lgf "logging to stream and file" b
format = '%(asctime)s - %(levelname)s - %(message)s'
ch = logging.StreamHandler()
ch.setFormatter(logging.Formatter(format))
fh = logging.FileHandler('spam.log')
fh.setFormatter(logging.Formatter(format))
logger = logging.getLogger()
logger.setLevel(logging.DEBUG)
logger.addHandler(ch)
logger.addHandler(fh)
endsnippet

snippet lgd "logging to stream and file (dictConfig)" b
def get_logger():
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': True,
        'formatters': {
            'simple': {'format': '%(asctime)s - %(levelname)s - %(message)s'}
        },
        'handlers': {
            'console': {
                'level': 'DEBUG',
                'class': 'logging.StreamHandler',
                'formatter': 'simple'
            },
            'file': {
                'level': 'DEBUG',
                'class': 'logging.FileHandler',
                'filename': 'output.log',
                'formatter': 'simple'
            },
        },
        'loggers': {
            __name__: {
                'handlers': ['console', 'file'],
                'level': 'DEBUG'
            }
        }
    }
    logging.config.dictConfig(LOGGING)
    return logging.getLogger(__name__)

logger = get_logger()
endsnippet

snippet ap "argparse" b
import argparse


def argument_parser():
    parser = argparse.ArgumentParser(description="describe me")
    parser.add_argument(
        "filename", type=argparse.FileType("r"), help="name of the file to convert"
    )
    parser.add_argument(
        "--source_format", "-sf", choices=["xml", "json"], help="source format"
    )
    parser.add_argument(
        "target_format",
        default="xml",
        nargs="?",
        choices=["xml", "json"],
        help="target format",
    )
    return parser


def main(argv=None):
    args = argument_parser().parse_args(argv)
endsnippet

snippet ko "kickoff a python script" b
#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
"""


def main():
    pass


if __name__ == '__main__':
    main()
endsnippet

snippet dt "import datetime as dt"
import datetime as dt
endsnippet


snippet tt "import typing as t"
import typing as t
endsnippet

snippet nt "now with timezone"
def now_with_tz(tz=dt.timezone.utc):
    """
    Return the current time as a zone-aware timestamp.
    """
    return dt.datetime.now(tz=tz)
endsnippet

snippet dp "date picker argument parser"
import argparse
import datatime as dt


def argument_parser(description="command"):
    parser = argparse.ArgumentParser(description=description)

    # date selector
    parser.add_argument("--end-date", "-ed", help="end date", type=valid_date)
    parser.add_argument("--days", "-d", type=int, help="days")
    parser.add_argument("--start-date", "-sd", help="start date", type=valid_date)
    return parser


def parse_dates(args):
    if args.start_date and args.end_date:
        start_date, end_date = args.start_date, args.end_date
    elif args.start_date and args.days:
        start_date = args.start_date
        end_date = args.start_date + dt.timedelta(days=args.days)
    elif args.end_date and args.days:
        start_date = args.end_date - dt.timedelta(days=args.days)
        end_date = args.end_date
    elif args.start_date:
        start_date = args.start_date
        end_date = dt.date.today()
    elif args.end_date:
        end_date = args.end_date
        start_date = end_date - dt.timedelta(days=1)
    else:
        end_date = dt.date.today()
        start_date = end_date - dt.timedelta(days=args.days or 1)
    print(
        f"start_date: {start_date}, end_date: {end_date},"
        f" days: {(end_date - start_date).days}"
    )
    return start_date, end_date


def convert_date_range(start_date, end_date):
    start_time = dt.datetime.combine(start_date, dt.time.min)
    end_time = dt.datetime.combine(end_date, dt.time.max)
    return start_time, end_time
endsnippet


snippet cp "date picker argument parser"
def color_print(text: str, color: str = ""):
    mapping = {
        "black": (0, 0, 0),
        "white": (255, 255, 255),
        "red": (255, 0, 0),
        "lime": (0, 255, 0),
        "blue": (0, 0, 255),
        "yellow": (255, 255, 0),
        "cyan": (0, 255, 255),
        "magenta": (255, 0, 255),
        "silver": (192, 192, 192),
        "gray": (128, 128, 128),
        "maroon": (128, 0, 0),
        "olive": (128, 128, 0),
        "green": (0, 128, 0),
        "purple": (128, 0, 128),
        "teal": (0, 128, 128),
        "navy": (0, 0, 128),
    }
    if color:
        try:
            r, g, b = mapping[color]
            print(f"\033[38;2;{r};{g};{b}m{text}\033[0m")
            return
        except KeyError:
            print(
                f'Unsupported color "{color}", use one of "{", ".join(mapping.keys())}".'
            )
    else:
        print(text)
endsnippet
